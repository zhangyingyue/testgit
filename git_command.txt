1. 填写用户名和邮箱作为标识，global表示这台机器上所有的git仓库都会用这个配置（邮箱和用户名）
	git config --global user.name "zhang tingyue"
	git config --global user.email "1938703194@qq.com"
2. 创建版本库（repository）
	2.1 在D:/git目录下新建一个testgit版本库
		cd D:
		cd git
		mkdir testgit
		cd testgit
		pwd(该命令用于显示当前的目录)
	2.2 把这个目录（D:/git/testgit）变成git可以管理的仓库
		git init
成功标志：testgit目录下出现.git的目录。该目录是Git来跟踪管理版本的。
3. 跟踪管理版本
	3.1 将文本/代码添加到暂存区（如readme.txt）
		git add readme.txt
	3.2 把文件提交到仓库
		git commit -m "readme.txt提交"
	3.3 查看是否有文件未提交
		git status
	      版本控制系统只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，
	Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，
	虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串
	起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。
	3.4 查看(readme.txt)修改了哪些内容
		git diff readme.txt
	3.5 查看（readme.txt）内容
		cat readme.txt
	3.6 提交修改（3.1）和提交文件（3.2）
4. git版本回退
	4.1 查看历史记录
		git log
	该命令显示从最近到最远的显示日志，可以看见近3次提交。
	4.2 要显示简洁的日志
		git log --pretty=oneline
	4.3 回退到上一个版本
		git reset --hard HEAD^
	4.4 回退到上上个版本
		git reset --hard HEAD^^
	4.5 回退到前100个版本的话
		git reset --hard HEAD~100
	4.6 退到当时最新的版本
		git reset --hard e6282d5
	版本号通过 git reflog 来显示。（e6282d5）
5. 如何理解工作区和暂存区
        工作区：电脑中看到的目录，比如testgit里除.git隐藏目录版本库以外的文件。
        版本库：.git目录  暂存区（stage）
		 第一个分区（master）
		 指向master的一个指针HEAD。
git add命令是将文件添加到暂存区。
git commit命令是把暂存区的所有内容提交到当前分支上。
6. Git撤销修改和删除文件操作
	6.1 丢弃工作区的修改
		git checkout -- readme.txt
	6.2 删除文件（已经提交状态）
		rm readme.txt
	6.3 恢复此文件（没将删除状态提交之前）
		git checkout -- readme.txt
7. 远程仓库
	7.1 创建SSH Key（本地仓库和远程仓库之间的传输是通过SSH加密）
		ssh-keygen -t rsa -C "1938703194@qq.com"
	成功标志：文件夹中多了id_rsa和id_rsa.pub这两个文件。
	7.2 登录github, 打开“settings”中的SSH Keys页面-->Add SSH Key-->填写任意title。
	将id_rsa.pub这个文件夹中的内容复制粘贴到key
8. 本地仓库的内容推送到远程仓库
	github中新建一个仓库，命名为testgit。
	本地的testgit运行命令：
		git remote add origin https://github.com/zhangyingyue/testgit.git
		git push -u origin master（会弹出窗口，需要输入GitHub的用户名和密码）
	推送最新的修改：git push origin master
9. 从远程仓库克隆
	git clone http://github.com/zhangyingyue/testgit2
10. 创建合并分支
	所谓分支的概念：每次提交都会被串成时间线，这个时间线就是一个分支。
	10.1 创建并切换分支
		git checkout -b dev    <==>相当于两条语句：git branch dev; git checkout dev
	10.2 查看分支(列出所有分支，当前分支前面加星号)
		git branch
	10.3 将dev分支上的内容合并到分支master上
		git merge dev
	Fast-forward意思是这次合并是“快进模式”，直接把master指向dev的当前提交。因此合并速度快。
	创建一个新分支，修改内容后将文件保存到暂存区，切换master分支，将dev分支的内容合并到master分支上。
	master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活。
	任务应该在新建的dev分支上进行，完成以后可以合并到master主分支上来。
11. bug分支（中断事件）
	11.1 隐藏当前工作分支
		git stash
	11.2 在主分支master上创建一个临时的分支
		git checkout -b issue-404
	11.3 修复完成，切换到master分支上，完成合并，最后删除issue-404分支
		git checkout master
		git merge --no-ff -m "merge bug fix 404" issue-404
		git branch -d issue-404
	11.4 回到dev分支
		git checkout dev
	11.5 查看工作现场
		git stash list
	11.6 恢复之前的工作分支(方法一)
		git stash apply  恢复
		git stash drop    删除
	11.6 方法二
		git stash pop     恢复并删除	
12. 多人协作
	当从远程库克隆时，git自动把本地的master分支和远程的master分支对应起来了，远程库的默认名称时origin。
	12.1 查看远程库的信息
		git remote
		git remote -v(详细信息)
	12.2 本地分支提交给远程
		git push origin master
	12.3 本地的dev分支推送到远程仓库
		git push origin dev
	推送失败的话，是因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法：
	先把最新的提交clone到本地  git pull  然后在本地合并，解决冲突，再推送。
	12.4 创建远程的origin的dev分支到本地来
		git checkout -b dev oringin/dev
	如果还是失败了，原因时没有指定本地dev分支与远程dev分支的链接，根据提示，设置dev和origin/dev的链接，如下：
	12.5 链接本地和远程仓库的dev
		git branch --set-upstream dev origin/dev
		git pull
		如仍有冲突 手动解决冲突地方。
